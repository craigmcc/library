generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessToken {
  id      Int      @id @default(autoincrement())
  expires DateTime @db.Timestamptz(6)
  scope   String
  token   String
  userId  Int      @map("user_id")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_tokens")
}

model Author {
  id             Int               @id @default(autoincrement())
  active         Boolean?          @default(true)
  libraryId      Int               @map("library_id")
  lastName       String            @map("last_name") @db.VarChar(255)
  firstName      String            @map("first_name") @db.VarChar(255)
  notes          String?           @db.VarChar(255)
  library        Library           @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  authorsSeries  AuthorsSeries[]
  authorsStories AuthorsStories[]
  authorsVolumes AuthorsVolumes[]

  @@unique([libraryId, lastName, firstName])
  @@map("authors")
}

model AuthorsSeries {
  authorId  Int      @map("author_id")
  principal Boolean?
  seriesId  Int      @map("series_id")
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  series    Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@id([authorId, seriesId])
  @@map("authors_series")
}

model AuthorsStories {
  authorId  Int      @map("author_id")
  principal Boolean?
  storyId   Int      @map("story_id")
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@id([authorId, storyId])
  @@map("authors_stories")
}

model AuthorsVolumes {
  authorId  Int      @map("author_id")
  principal Boolean?
  volumeId  Int      @map("volume_id")
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  volume    Volume   @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  @@id([authorId, volumeId])
  @@map("authors_volumes")
}

model Library {
  id      Int      @id @default(autoincrement())
  active  Boolean? @default(true)
  name    String   @unique
  notes   String?
  scope   String   @unique
  authors Author[]
  series  Series[]
  stories Story[]
  volumes Volume[]

  @@map("libraries")
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  accessToken String   @map("access_token")
  expires     DateTime @db.Timestamptz(6)
  token       String
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Series {
  id            Int              @id @default(autoincrement())
  active        Boolean?         @default(true)
  copyright     String?          @db.VarChar(255)
  libraryId     Int              @map("library_id")
  name          String           @db.VarChar(255)
  notes         String?          @db.VarChar(255)
  authorsSeries AuthorsSeries[]
  library       Library          @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  seriesStories SeriesStories[]

  @@unique([libraryId, name])
  @@map("series")
}

model SeriesStories {
  ordinal  Int?
  seriesId Int    @map("series_id")
  storyId  Int    @map("story_id")
  series   Series @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  story    Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@id([seriesId, storyId])
  @@map("series_stories")
}

model Story {
  id             Int               @id @default(autoincrement())
  active         Boolean?          @default(true)
  copyright      String?           @db.VarChar(255)
  libraryId      Int               @map("library_id")
  name           String            @db.VarChar(255)
  notes          String?           @db.VarChar(255)
  authorsStories AuthorsStories[]
  seriesStories  SeriesStories[]
  library        Library           @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  volumesStories VolumesStories[]

  @@unique([libraryId, name])
  @@map("stories")
}

model User {
  id                   Int            @id @default(autoincrement())
  active               Boolean?       @default(true)
  google_books_api_key String?
  name                 String
  password             String
  scope                String
  username             String         @unique
  accessTokens         AccessToken[]
  refreshTokens        RefreshToken[]

  @@map("users")
}

model Volume {
  id             Int               @id @default(autoincrement())
  active         Boolean?          @default(true)
  copyright      String?           @db.VarChar(255)
  googleId       String?           @map("google_id") @db.VarChar(255)
  isbn           String?           @db.VarChar(255)
  libraryId      Int               @map("library_id")
  location       String?           @db.VarChar(255)
  name           String            @db.VarChar(255)
  notes          String?           @db.VarChar(255)
  read           Boolean           @default(false)
  type           String            @db.VarChar(255)
  authorsVolumes AuthorsVolumes[]
  library        Library           @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  volumesStories VolumesStories[]

  @@unique([libraryId, name])
  @@map("volumes")
}

model VolumesStories {
  volumeId Int    @map("volume_id")
  storyId  Int    @map("story_id")
  story    Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  volume   Volume @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  @@id([volumeId, storyId])
  @@map("volumes_stories")
}
